async function h(t,i={}){let s={env:Object.assign(Object.create(globalThis),i.env||{},{abort(r,o,e,n){r=c(r>>>0),o=c(o>>>0),e=e>>>0,n=n>>>0,(()=>{throw Error(`${r} in ${o}:${e}:${n}`)})()},"console.log"(r){r=c(r>>>0),console.log(r)},"console.error"(r){r=c(r>>>0),console.error(r)},seed(){return Date.now()*Math.random()}})},{exports:l}=await WebAssembly.instantiate(t,s),u=l.memory||i.env.memory,y=Object.setPrototypeOf({run(r){r=m(r)||w(),l.run(r)}},l);function c(r){if(!r)return null;let o=r+new Uint32Array(u.buffer)[r-4>>>2]>>>1,e=new Uint16Array(u.buffer),n=r>>>1,a="";for(;o-n>1024;)a+=String.fromCharCode(...e.subarray(n,n+=1024));return a+String.fromCharCode(...e.subarray(n,o))}function m(r){if(r==null)return 0;let o=r.length,e=l.__new(o<<1,2)>>>0,n=new Uint16Array(u.buffer);for(let a=0;a<o;++a)n[(e>>>1)+a]=r.charCodeAt(a);return e}function w(){throw TypeError("value must not be null")}return y}var{memory:g,run:f}=await(async t=>h(await(async()=>{try{return await globalThis.WebAssembly.compileStreaming(globalThis.fetch(t))}catch{return globalThis.WebAssembly.compile(await(await import("node:fs/promises")).readFile(t))}})(),{}))(new URL("release.wasm",import.meta.url));async function p(t){let i;try{i=await globalThis.fetch(t).then(s=>s.text())}catch{i=await(await import("node:fs/promises")).readFile(t,"utf-8")}try{f(i)}catch(s){console.error(`Failed to run file ${t}: ${s}`)}}function _(t){f(t)}export{p as runFromPath,_ as runFromString};
